/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package data.progress;

import java.awt.Component;
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.rmi.Naming.list;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import static java.util.Collections.list;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataSource;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
/**
 *
 * @author levan
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        setPanelEnabled(jpnUpdate,false);
        btUse.setEnabled(false);
        btSelect.setEnabled(false);
        btExport.setEnabled(false);
   }
    
    // dataset source
    // duong dan
    String dataPath = "";
    public void setDataPath(String dataPath) {
        this.dataPath = dataPath;
    }
    public String getDataPath() {
        return this.dataPath;
    }
    // data source
    DataSource dataSource;
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    public DataSource getDataSource() {
        return this.dataSource;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpnData = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfUser = new javax.swing.JTextField();
        tfPassword = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btConnect = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tfPort = new javax.swing.JTextField();
        cbData = new javax.swing.JComboBox();
        btUse = new javax.swing.JButton();
        cbTable = new javax.swing.JComboBox();
        btSelect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jShowTable = new javax.swing.JTable();
        btExport = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jpnUpdate = new javax.swing.JPanel();
        jpnData1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cbData1 = new javax.swing.JComboBox();
        btUse1 = new javax.swing.JButton();
        cbTable1 = new javax.swing.JComboBox();
        btSelect1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableShow2 = new javax.swing.JTable();
        btUpdate = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableShow1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        btChoose = new javax.swing.JButton();
        jlbNameFile = new javax.swing.JLabel();
        jlbNameTable = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROCESS DATA");
        setBackground(new java.awt.Color(31, 11, 230));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 145, 181), 5));
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N

        jpnData.setBackground(new java.awt.Color(224, 222, 241));

        jLabel1.setText("CONNECT TO MYSQL:");

        jLabel2.setText("USERNAME");

        jLabel3.setText("PASSWORD");

        tfUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfUser.setText("root");
        tfUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfUserActionPerformed(evt);
            }
        });

        tfPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPasswordActionPerformed(evt);
            }
        });

        jLabel4.setText("SELECT DATABASE");

        jLabel5.setText("SELECT TABLE");

        btConnect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btConnect.setText("CONNECT");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnectActionPerformed(evt);
            }
        });

        jLabel6.setText("HOST(OR HOST:PORT)");

        tfPort.setText("3306");
        tfPort.setToolTipText("");
        tfPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPortActionPerformed(evt);
            }
        });

        btUse.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btUse.setText("USE");
        btUse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUseActionPerformed(evt);
            }
        });

        cbTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTableActionPerformed(evt);
            }
        });

        btSelect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btSelect.setText("SELECT");
        btSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jShowTable);

        btExport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btExport.setText("EXPORT");
        btExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportActionPerformed(evt);
            }
        });

        jLabel7.setText("EXPORT FILE EXCEL");

        javax.swing.GroupLayout jpnDataLayout = new javax.swing.GroupLayout(jpnData);
        jpnData.setLayout(jpnDataLayout);
        jpnDataLayout.setHorizontalGroup(
            jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpnDataLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(btExport, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnDataLayout.createSequentialGroup()
                        .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnDataLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpnDataLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tfUser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tfPassword)))
                        .addGap(16, 16, 16)
                        .addComponent(btConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnDataLayout.createSequentialGroup()
                        .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnDataLayout.createSequentialGroup()
                                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbData, 0, 292, Short.MAX_VALUE)
                                    .addComponent(cbTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(72, 72, 72)
                                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btUse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpnDataLayout.setVerticalGroup(
            jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnDataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpnDataLayout.createSequentialGroup()
                        .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfUser)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btUse)))
                .addGap(18, 18, 18)
                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSelect))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btExport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("DATA", jpnData);

        jpnData1.setBackground(new java.awt.Color(224, 222, 241));

        jLabel12.setText("SELECT DATABASE");

        jLabel13.setText("SELECT TABLE");

        btUse1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btUse1.setText("USE");
        btUse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUse1ActionPerformed(evt);
            }
        });

        cbTable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTable1ActionPerformed(evt);
            }
        });

        btSelect1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btSelect1.setText("SELECT");
        btSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelect1ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jTableShow2);

        btUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btUpdate.setText("INSERT");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        jTableShow1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTableShow1);

        jPanel1.setBackground(new java.awt.Color(224, 222, 241));

        jLabel15.setText("IMPORT FILE EXCEL");

        btChoose.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btChoose.setText("CHOOSE FILE");
        btChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(btChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
        );

        jlbNameFile.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jlbNameFile.setText("Name of file excel");

        jlbNameTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jlbNameTable.setText("Selected table");

        javax.swing.GroupLayout jpnData1Layout = new javax.swing.GroupLayout(jpnData1);
        jpnData1.setLayout(jpnData1Layout);
        jpnData1Layout.setHorizontalGroup(
            jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnData1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnData1Layout.createSequentialGroup()
                        .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbData1, 0, 316, Short.MAX_VALUE)
                            .addComponent(cbTable1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(52, 52, 52)
                        .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btUse1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btSelect1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnData1Layout.createSequentialGroup()
                        .addComponent(jlbNameTable, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlbNameFile, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnData1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnData1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jpnData1Layout.setVerticalGroup(
            jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnData1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btUse1))
                .addGap(18, 18, 18)
                .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTable1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSelect1))
                .addGap(38, 38, 38)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbNameFile, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbNameTable, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jpnData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpnUpdateLayout = new javax.swing.GroupLayout(jpnUpdate);
        jpnUpdate.setLayout(jpnUpdateLayout);
        jpnUpdateLayout.setHorizontalGroup(
            jpnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnUpdateLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jpnData1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpnUpdateLayout.setVerticalGroup(
            jpnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnUpdateLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jpnData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("UPDATE", jpnUpdate);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // MO & DONG CAC TAB
    void setPanelEnabled(JPanel panel, Boolean isEnabled) {
        panel.setEnabled(isEnabled);

        Component[] components = panel.getComponents();

        for (Component component : components) {
            if (component instanceof JPanel) {
                setPanelEnabled((JPanel) component, isEnabled);
            }
            component.setEnabled(isEnabled);
        }
    }
    
    
    private Connection connect;
    private Statement statement;
    
    
    private void btSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectActionPerformed
        try {
            statement = connect.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM `" + cbTable.getSelectedItem() + "`;");
            
            btExport.setEnabled(true);
            // get columns info
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tm = (DefaultTableModel) jShowTable.getModel();

            // clear existing columns
            tm.setColumnCount(0);

            // add specified columns to table
            for (int i = 1; i <= columnCount; i++ ) {
                tm.addColumn(rsmd.getColumnName(i));
            }

            // clear existing rows
            tm.setRowCount(0);

            // add rows to table
            while (rs.next()) {
                String[] a = new String[columnCount];
                for(int i = 0; i < columnCount; i++) {
                    a[i] = rs.getString(i+1);
                }
                tm.addRow(a);
            }
            tm.fireTableDataChanged();

            // Close ResultSet and Statement
            rs.close();
            statement.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        }
    }//GEN-LAST:event_btSelectActionPerformed

    private void cbTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTableActionPerformed

    private void btUseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUseActionPerformed
        try {
            // Init statement
            statement = connect.createStatement();
            // Set current DB
            // !!! WARNING TO QUOTES - it's backticks (`), not " and not ' !!!
            // !!! BACKTICKS ARE REQUIRED IF TABLE NAME CONTAINS SPACES !!!
            statement.executeQuery("USE `" + cbData.getSelectedItem().toString() + "`;");

            // Clear combobox with tables names
            cbTable.removeAllItems();

            // Get all DB's tables and put them to combobox...
            statement = connect.createStatement();
            // !!! and now QUOTES, NOT BACKTICKS !!!
            // !!! because "jComboBox1.getSelectedItem().toString()" is column value, not column/table/db name !!!
            /*ResultSet rs = statement.executeQuery("SELECT TABLE_NAME FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = '" + jComboBox1.getSelectedItem().toString() + "'");*/
            ResultSet rs = statement.executeQuery("SHOW TABLES;");

            // Add tables list to combobox
            while (rs.next()) {
                cbTable.addItem(rs.getString(1));
            }

            // Close statement
            statement.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                "Can't connect to DB and/or get tables list. \nMore info: \n" + e.toString(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btUseActionPerformed

    private void tfUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfUserActionPerformed

    private void btUse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUse1ActionPerformed
        // TODO add your handling code here:
        try {
            // Init statement
            statement = connect.createStatement();
            // Set current DB
            // !!! WARNING TO QUOTES - it's backticks (`), not " and not ' !!!
            // !!! BACKTICKS ARE REQUIRED IF TABLE NAME CONTAINS SPACES !!!
            statement.executeQuery("USE `" + cbData1.getSelectedItem().toString() + "`;");

            // Clear combobox with tables names
            cbTable1.removeAllItems();

            // Get all DB's tables and put them to combobox...
            statement = connect.createStatement();
            // !!! and now QUOTES, NOT BACKTICKS !!!
            // !!! because "jComboBox1.getSelectedItem().toString()" is column value, not column/table/db name !!!
            /*ResultSet rs = statement.executeQuery("SELECT TABLE_NAME FROM information_schema.TABLES" +
                " WHERE TABLE_SCHEMA = '" + jComboBox1.getSelectedItem().toString() + "'");*/
            ResultSet rs = statement.executeQuery("SHOW TABLES;");

            // Add tables list to combobox
            while (rs.next()) {
                cbTable1.addItem(rs.getString(1));
            }

            // Close statement
            statement.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                "Can't connect to DB and/or get tables list. \nMore info: \n" + e.toString(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }                                 
    }//GEN-LAST:event_btUse1ActionPerformed

    private void cbTable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTable1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTable1ActionPerformed

    private void btSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelect1ActionPerformed
        // TODO add your handling code here:
        try {
            statement = connect.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM `" + cbTable1.getSelectedItem() + "`;");
            
            // set ten dataset
            jlbNameTable.setText((String) cbTable1.getSelectedItem());
            
            // get columns info
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tm = (DefaultTableModel) jTableShow1.getModel();

            // clear existing columns
            tm.setColumnCount(0);

            // add specified columns to table
            for (int i = 1; i <= columnCount; i++ ) {
                tm.addColumn(rsmd.getColumnName(i));
            }

            // clear existing rows
            tm.setRowCount(0);

            // add rows to table
            while (rs.next()) {
                String[] a = new String[columnCount];
                for(int i = 0; i < columnCount; i++) {
                    a[i] = rs.getString(i+1);
                }
                tm.addRow(a);
            }
            tm.fireTableDataChanged();

            // Close ResultSet and Statement
            rs.close();
            statement.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        }
    }//GEN-LAST:event_btSelect1ActionPerformed

    private void tfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPasswordActionPerformed

    private void tfPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPortActionPerformed

    private void btConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConnectActionPerformed
        // TODO add your handling code here:
            try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this,
                    "MySQL Connector/J (*.jar file) not added to your project and/or not exist.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Connect to host
        try {
           connect = DriverManager.getConnection("jdbc:mysql://localhost:" + tfPort.getText()+"?serverTimezone=UTC",
                tfUser.getText(), tfPassword.getText());
            
            
            setPanelEnabled(jpnUpdate,true);
            btUse.setEnabled(true);
            btSelect.setEnabled(true);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Can't connect to host. Host, username or password maybe incorrect or unavailable. \nMore info: \n" + e.toString());
            return;
        }
        
        // Clear combobox with DBs names
        cbData.removeAllItems();
        cbData1.removeAllItems();
        
        // Get all DBs and put them to combobox
        try {
            ResultSet rs = connect.getMetaData().getCatalogs();

            while (rs.next()) {
                cbData.addItem(rs.getString("TABLE_CAT"));
                cbData1.addItem(rs.getString("TABLE_CAT"));
            }
        } catch (SQLException e) { }
    }                                        

    // Connect to DB
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            // Init statement
            statement = connect.createStatement();
            // Set current DB
            // !!! WARNING TO QUOTES - it's backticks (`), not " and not ' !!!
            // !!! BACKTICKS ARE REQUIRED IF TABLE NAME CONTAINS SPACES !!!
            statement.executeQuery("USE `" + cbData.getSelectedItem().toString() + "`;");
            
            // Clear combobox with tables names
            cbTable.removeAllItems();
            
            // Get all DB's tables and put them to combobox...
            statement = connect.createStatement();
            // !!! and now QUOTES, NOT BACKTICKS !!!
            // !!! because "jComboBox1.getSelectedItem().toString()" is column value, not column/table/db name !!!
            /*ResultSet rs = statement.executeQuery("SELECT TABLE_NAME FROM information_schema.TABLES" +
                    " WHERE TABLE_SCHEMA = '" + jComboBox1.getSelectedItem().toString() + "'");*/
            ResultSet rs = statement.executeQuery("SHOW TABLES;");
            
            // Add tables list to combobox
            while (rs.next()) {
                cbTable.addItem(rs.getString(1));
            }
                    
            // Close statement
            statement.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Can't connect to DB and/or get tables list. \nMore info: \n" + e.toString(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }       
    }//GEN-LAST:event_btConnectActionPerformed
//    funvtion 
    
    @SuppressWarnings("empty-statement")
    private void btExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Data");
        int userSelection = fileChooser.showSaveDialog(this);
        if(userSelection == JFileChooser.APPROVE_OPTION){
//            File fileToSave = fileChooser.getSelectedFile();
            //lets write to file
            String filename = fileChooser.getSelectedFile().getName(); 
            String path = fileChooser.getSelectedFile().getParentFile().getPath();

					int len = filename.length();
					String ext = "";
					String file = "";

					if(len > 4){
						ext = filename.substring(len-4, len);
					}

					if(ext.equals(".csv")){
						file = path + "\\" + filename; 
					}else{
						file = path + "\\" + filename + ".csv"; 
					}
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);
                for(int j = 0;j<jShowTable.getColumnCount();j++){
                    bw.write(jShowTable.getColumnName(j).toString()+",");
                }
                bw.newLine();
                for (int i = 0; i < jShowTable.getRowCount(); i++) {
                    for (int j = 0; j < jShowTable.getColumnCount(); j++) {
                        //write
                        bw.write(jShowTable.getValueAt(i, j).toString()+",");
                    }
                    bw.newLine();//record per line 
                }
                JOptionPane.showMessageDialog(this, "SUCCESSFULLY SAVED","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
                bw.close();
                fw.close();
            } catch (IOException ex) {
               JOptionPane.showMessageDialog(this, "ERROR","ERROR MESSAGE",JOptionPane.ERROR_MESSAGE);
            }
            
            
        }
    }//GEN-LAST:event_btExportActionPerformed

    String[] str;
    int returnValue;
    JFileChooser jfc;
    private void btChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btChooseActionPerformed
        // TODO add your handling code here:
        // BAM VAO BUTTON CHON FILE EXCEL
        jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Chọn file excel");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("excel file", "csv", "xlsx", "xls", "xlsm");
        jfc.addChoosableFileFilter(filter);

        returnValue = jfc.showOpenDialog(null);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // lay ra file dataset da chon
            File selectedFile = jfc.getSelectedFile();
            // set ten dataset
            jlbNameFile.setText(selectedFile.getName());
            // luu duong dan dataset vao bien toan cuc "dataPath"
            setDataPath(selectedFile.getAbsolutePath());
            // hien dataset ra bang trong tab DATA
            try {
                BufferedReader br = new BufferedReader(new FileReader(selectedFile));
                
                // lay ra ten cac cot ngan cach bang dau " "
                String firstLine = br.readLine().trim();
                String[] columnsName = firstLine.split(",");
                
                // model la lay ra bang dang su dung
                DefaultTableModel model = (DefaultTableModel)jTableShow2.getModel();
                
                // xoa tat ca cac dong trong bang
                model.getDataVector().removeAllElements();
                
                // set ten cot vao bang
                model.setColumnIdentifiers(columnsName);
                
                // xoa tat ca cac dong trong bang
                model.getDataVector().removeAllElements();
                // lay ra tat ca cac dong trong file csv luu vao object "tableLines"
                Object[] tableLines = br.lines().toArray();

                // extratct data from lines
                // set data to jtable model
                for(int i = 0; i < tableLines.length; i++)
                {
                    String line = tableLines[i].toString().trim();
                    String[] dataRow = line.split(",");
                    model.addRow(dataRow);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            //
        }
    }//GEN-LAST:event_btChooseActionPerformed
    
    
    public void executeSQlQuery(String query, String message)
   {
       try{
           statement = connect.createStatement();
           if((statement.executeUpdate(query)) == 1)
           {
               // refresh jtable data
               DefaultTableModel model = (DefaultTableModel)jTableShow2.getModel();
               model.setRowCount(0);
           }
       }catch(Exception ex){
            ex.printStackTrace();
           
       }
   }
    
    String SplitArray(String[] str)
    {
        String result = "'";
        for (int i = 0; i < str.length; i++) {
            if (i < str.length - 1) result += str[i] + "','";
            else result += str[i] + "'";
        }
        return result;
    }
    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        // TODO add your handling code here:
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // lay ra file dataset da chon
            File selectedFile = jfc.getSelectedFile();
            
            // hien dataset ra bang trong tab DATA
            try {
                BufferedReader br = new BufferedReader(new FileReader(selectedFile));
                
                // lay ra ten cac cot ngan cach bang dau " "
                String firstLine = br.readLine().trim();
                String[] columnsName = firstLine.split(",");
                
                DefaultTableModel model = (DefaultTableModel)jTableShow2.getModel();
                
                // xoa tat ca cac dong trong bang
                model.getDataVector().removeAllElements();
                
                // set ten cot vao bang
                model.setColumnIdentifiers(columnsName);
                
                // xoa tat ca cac dong trong bang
                model.getDataVector().removeAllElements();
               
                // lay ra tat ca cac dong trong file csv luu vao object "tableLines"
                Object[] tableLines = br.lines().toArray();

                // extratct data from lines
                // set data to jtable model
                for(int i = 0; i < tableLines.length; i++)
                {
                    String line = tableLines[i].toString().trim();
                    str = line.split(",");
                    String query = "INSERT INTO "+cbTable1.getSelectedItem()+" VALUES (" + SplitArray(str) +")";
                    executeSQlQuery(query, "Inserted");
                }
                for(int i = 0; i < tableLines.length; i++)
                {
                    String line = tableLines[i].toString().trim();
                    str = line.split(",");
                    model.addRow(str);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            //
        }
        

//        for( int row = 0; row < m; row++){
//            
//            String query = "INSERT INTO "+cbTable1.getSelectedItem()+" VALUES (" + SplitArray(str) +")";
//
//            executeSQlQuery(query, "Inserted");
//            
//        }
        
        
        try {
            statement = connect.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM `" + cbTable1.getSelectedItem() + "`;");

            // get columns info
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tm = (DefaultTableModel) jTableShow1.getModel();

            // clear existing columns
            tm.setColumnCount(0);

            // add specified columns to table
            for (int i = 1; i <= columnCount; i++ ) {
                tm.addColumn(rsmd.getColumnName(i));
            }

            // clear existing rows
            tm.setRowCount(0);

            // add rows to table
            while (rs.next()) {
                String[] a = new String[columnCount];
                for(int i = 0; i < columnCount; i++) {
                    a[i] = rs.getString(i+1);
                }
                tm.addRow(a);
            }
            tm.fireTableDataChanged();

            // Close ResultSet and Statement
            rs.close();
            statement.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        }
    }//GEN-LAST:event_btUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btChoose;
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btExport;
    private javax.swing.JButton btSelect;
    private javax.swing.JButton btSelect1;
    private javax.swing.JButton btUpdate;
    private javax.swing.JButton btUse;
    private javax.swing.JButton btUse1;
    private javax.swing.JComboBox cbData;
    private javax.swing.JComboBox cbData1;
    private javax.swing.JComboBox cbTable;
    private javax.swing.JComboBox cbTable1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jShowTable;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableShow1;
    private javax.swing.JTable jTableShow2;
    private javax.swing.JLabel jlbNameFile;
    private javax.swing.JLabel jlbNameTable;
    private javax.swing.JPanel jpnData;
    private javax.swing.JPanel jpnData1;
    private javax.swing.JPanel jpnUpdate;
    private javax.swing.JPasswordField tfPassword;
    private javax.swing.JTextField tfPort;
    private javax.swing.JTextField tfUser;
    // End of variables declaration//GEN-END:variables


}
